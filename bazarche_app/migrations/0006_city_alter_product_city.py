# Generated by Django 5.0.2 on 2025-05-31 09:36

import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models

def create_cities_from_products(apps, schema_editor):
    Product = apps.get_model('bazarche_app', 'Product')
    City = apps.get_model('bazarche_app', 'City')
    
    # Get all unique city names from products
    city_names = Product.objects.exclude(city__isnull=True).exclude(city='').values_list('city', flat=True).distinct()
    
    # Create City objects for each unique city name
    for city_name in city_names:
        City.objects.create(name=city_name)

def reverse_cities_migration(apps, schema_editor):
    City = apps.get_model('bazarche_app', 'City')
    City.objects.all().delete()

def update_product_cities(apps, schema_editor):
    Product = apps.get_model('bazarche_app', 'Product')
    City = apps.get_model('bazarche_app', 'City')
    
    # Update each product's city_id field to point to the corresponding City object
    for product in Product.objects.exclude(city__isnull=True).exclude(city=''):
        city_obj = City.objects.get(name=product.city)
        Product.objects.filter(id=product.id).update(city_id=city_obj)

def reverse_product_cities(apps, schema_editor):
    Product = apps.get_model('bazarche_app', 'Product')
    City = apps.get_model('bazarche_app', 'City')
    
    # Update each product's city field back to the city name
    for product in Product.objects.exclude(city_id__isnull=True):
        city_obj = City.objects.get(id=product.city_id)
        Product.objects.filter(id=product.id).update(city=city_obj.name)

class Migration(migrations.Migration):

    dependencies = [
        ('bazarche_app', '0005_alter_category_options_remove_product_main_category_and_more'),
    ]

    operations = [
        # Step 1: Create City model
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='نام شهر')),
                ('order', models.IntegerField(default=0, verbose_name='ترتیب نمایش')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='تاریخ ایجاد')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='تاریخ به‌روزرسانی')),
            ],
            options={
                'verbose_name': 'شهر',
                'verbose_name_plural': 'شهرها',
                'ordering': ['order', 'name'],
            },
        ),
        
        # Step 2: Create cities from existing product cities
        migrations.RunPython(create_cities_from_products, reverse_cities_migration),
        
        # Step 3: Add temporary city_id field
        migrations.AddField(
            model_name='product',
            name='city_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='bazarche_app.city', verbose_name='شهر'),
        ),
        
        # Step 4: Update product cities
        migrations.RunPython(update_product_cities, reverse_product_cities),
        
        # Step 5: Remove old city field
        migrations.RemoveField(
            model_name='product',
            name='city',
        ),
        
        # Step 6: Rename city_id to city
        migrations.RenameField(
            model_name='product',
            old_name='city_id',
            new_name='city',
        ),
    ]
